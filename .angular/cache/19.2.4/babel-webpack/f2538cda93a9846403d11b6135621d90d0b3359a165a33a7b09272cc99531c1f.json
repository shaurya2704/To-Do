{"ast":null,"code":"/**\n * Creates a timer that accepts a `timerCalc` function to perform calculated timeout retries, such as exponential backoff.\n *\n * @example\n *    let reconnectTimer = new Timer(() => this.connect(), function(tries){\n *      return [1000, 5000, 10000][tries - 1] || 10000\n *    })\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n *    reconnectTimer.scheduleTimeout() // fires after 5000\n *    reconnectTimer.reset()\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n */\nexport default class Timer {\n  constructor(callback, timerCalc) {\n    this.callback = callback;\n    this.timerCalc = timerCalc;\n    this.timer = undefined;\n    this.tries = 0;\n    this.callback = callback;\n    this.timerCalc = timerCalc;\n  }\n  reset() {\n    this.tries = 0;\n    clearTimeout(this.timer);\n  }\n  // Cancels any previous scheduleTimeout and schedules callback\n  scheduleTimeout() {\n    clearTimeout(this.timer);\n    this.timer = setTimeout(() => {\n      this.tries = this.tries + 1;\n      this.callback();\n    }, this.timerCalc(this.tries + 1));\n  }\n}","map":{"version":3,"names":["Timer","constructor","callback","timerCalc","timer","undefined","tries","reset","clearTimeout","scheduleTimeout","setTimeout"],"sources":["/Users/shaurya.singh/Desktop/To-Do List/node_modules/@supabase/realtime-js/dist/module/lib/timer.js"],"sourcesContent":["/**\n * Creates a timer that accepts a `timerCalc` function to perform calculated timeout retries, such as exponential backoff.\n *\n * @example\n *    let reconnectTimer = new Timer(() => this.connect(), function(tries){\n *      return [1000, 5000, 10000][tries - 1] || 10000\n *    })\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n *    reconnectTimer.scheduleTimeout() // fires after 5000\n *    reconnectTimer.reset()\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n */\nexport default class Timer {\n    constructor(callback, timerCalc) {\n        this.callback = callback;\n        this.timerCalc = timerCalc;\n        this.timer = undefined;\n        this.tries = 0;\n        this.callback = callback;\n        this.timerCalc = timerCalc;\n    }\n    reset() {\n        this.tries = 0;\n        clearTimeout(this.timer);\n    }\n    // Cancels any previous scheduleTimeout and schedules callback\n    scheduleTimeout() {\n        clearTimeout(this.timer);\n        this.timer = setTimeout(() => {\n            this.tries = this.tries + 1;\n            this.callback();\n        }, this.timerCalc(this.tries + 1));\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAMA,KAAK,CAAC;EACvBC,WAAWA,CAACC,QAAQ,EAAEC,SAAS,EAAE;IAC7B,IAAI,CAACD,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,KAAK,GAAGC,SAAS;IACtB,IAAI,CAACC,KAAK,GAAG,CAAC;IACd,IAAI,CAACJ,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,SAAS,GAAGA,SAAS;EAC9B;EACAI,KAAKA,CAAA,EAAG;IACJ,IAAI,CAACD,KAAK,GAAG,CAAC;IACdE,YAAY,CAAC,IAAI,CAACJ,KAAK,CAAC;EAC5B;EACA;EACAK,eAAeA,CAAA,EAAG;IACdD,YAAY,CAAC,IAAI,CAACJ,KAAK,CAAC;IACxB,IAAI,CAACA,KAAK,GAAGM,UAAU,CAAC,MAAM;MAC1B,IAAI,CAACJ,KAAK,GAAG,IAAI,CAACA,KAAK,GAAG,CAAC;MAC3B,IAAI,CAACJ,QAAQ,CAAC,CAAC;IACnB,CAAC,EAAE,IAAI,CAACC,SAAS,CAAC,IAAI,CAACG,KAAK,GAAG,CAAC,CAAC,CAAC;EACtC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}