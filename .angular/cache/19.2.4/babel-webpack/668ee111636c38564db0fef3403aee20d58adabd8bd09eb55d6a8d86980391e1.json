{"ast":null,"code":"import _asyncToGenerator from \"/Users/shaurya.singh/Desktop/To-Do List/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { createClient } from '@supabase/supabase-js';\nimport { BehaviorSubject } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nexport class SupabaseService {\n  supabase;\n  todos = new BehaviorSubject([]);\n  constructor() {\n    this.supabase = createClient(environment.supabase.url, environment.supabase.anonKey);\n  }\n  getSupabaseClient() {\n    return this.supabase;\n  }\n  // Get all todos for the current user\n  getTodos() {\n    this.fetchTodos();\n    return this.todos.asObservable();\n  }\n  // Fetch todos from Supabase for the current user\n  fetchTodos() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const {\n          data: {\n            user\n          }\n        } = yield _this.supabase.auth.getUser();\n        if (!user) return;\n        const {\n          data,\n          error\n        } = yield _this.supabase.from('todos').select('*').eq('user_id', user.id).order('created_at', {\n          ascending: false\n        });\n        if (error) throw error;\n        _this.todos.next(data || []);\n      } catch (error) {\n        console.error('Error fetching todos:', error);\n      }\n    })();\n  }\n  // Add a new todo\n  addTodo(title, description, priority = 'medium') {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const {\n          data: {\n            user\n          }\n        } = yield _this2.supabase.auth.getUser();\n        if (!user) throw new Error('User not authenticated');\n        const {\n          error\n        } = yield _this2.supabase.from('todos').insert([{\n          title,\n          description,\n          priority,\n          completed: false,\n          user_id: user.id\n        }]);\n        if (error) throw error;\n        _this2.fetchTodos();\n      } catch (error) {\n        console.error('Error adding todo:', error);\n        throw error;\n      }\n    })();\n  }\n  // Update a todo\n  updateTodo(id, updates) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const {\n          data: {\n            user\n          }\n        } = yield _this3.supabase.auth.getUser();\n        if (!user) throw new Error('User not authenticated');\n        const {\n          error\n        } = yield _this3.supabase.from('todos').update(updates).eq('id', id).eq('user_id', user.id);\n        if (error) throw error;\n        _this3.fetchTodos();\n      } catch (error) {\n        console.error('Error updating todo:', error);\n        throw error;\n      }\n    })();\n  }\n  // Delete a todo\n  deleteTodo(id) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const {\n          data: {\n            user\n          }\n        } = yield _this4.supabase.auth.getUser();\n        if (!user) throw new Error('User not authenticated');\n        const {\n          error\n        } = yield _this4.supabase.from('todos').delete().eq('id', id).eq('user_id', user.id);\n        if (error) throw error;\n        _this4.fetchTodos();\n      } catch (error) {\n        console.error('Error deleting todo:', error);\n        throw error;\n      }\n    })();\n  }\n  // Toggle todo completion\n  toggleTodo(id, completed) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const {\n          data: {\n            user\n          }\n        } = yield _this5.supabase.auth.getUser();\n        if (!user) throw new Error('User not authenticated');\n        const {\n          error\n        } = yield _this5.supabase.from('todos').update({\n          completed\n        }).eq('id', id).eq('user_id', user.id);\n        if (error) throw error;\n        _this5.fetchTodos();\n      } catch (error) {\n        console.error('Error toggling todo:', error);\n        throw error;\n      }\n    })();\n  }\n  static ɵfac = function SupabaseService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || SupabaseService)();\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SupabaseService,\n    factory: SupabaseService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["createClient","BehaviorSubject","environment","SupabaseService","supabase","todos","constructor","url","anonKey","getSupabaseClient","getTodos","fetchTodos","asObservable","_this","_asyncToGenerator","data","user","auth","getUser","error","from","select","eq","id","order","ascending","next","console","addTodo","title","description","priority","_this2","Error","insert","completed","user_id","updateTodo","updates","_this3","update","deleteTodo","_this4","delete","toggleTodo","_this5","factory","ɵfac","providedIn"],"sources":["/Users/shaurya.singh/Desktop/To-Do List/src/app/services/supabase.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { createClient, SupabaseClient } from '@supabase/supabase-js';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { environment } from '../../environments/environment';\n\nexport interface Todo {\n  id: number;\n  title: string;\n  description?: string;\n  priority: 'low' | 'medium' | 'high';\n  completed: boolean;\n  created_at: string;\n  user_id: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SupabaseService {\n  private supabase: SupabaseClient;\n  private todos = new BehaviorSubject<Todo[]>([]);\n\n  constructor() {\n    this.supabase = createClient(\n      environment.supabase.url,\n      environment.supabase.anonKey\n    );\n  }\n\n  getSupabaseClient(): SupabaseClient {\n    return this.supabase;\n  }\n\n  // Get all todos for the current user\n  getTodos(): Observable<Todo[]> {\n    this.fetchTodos();\n    return this.todos.asObservable();\n  }\n\n  // Fetch todos from Supabase for the current user\n  private async fetchTodos() {\n    try {\n      const { data: { user } } = await this.supabase.auth.getUser();\n      if (!user) return;\n\n      const { data, error } = await this.supabase\n        .from('todos')\n        .select('*')\n        .eq('user_id', user.id)\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n      this.todos.next(data || []);\n    } catch (error) {\n      console.error('Error fetching todos:', error);\n    }\n  }\n\n  // Add a new todo\n  async addTodo(title: string, description?: string, priority: 'low' | 'medium' | 'high' = 'medium'): Promise<void> {\n    try {\n      const { data: { user } } = await this.supabase.auth.getUser();\n      if (!user) throw new Error('User not authenticated');\n\n      const { error } = await this.supabase\n        .from('todos')\n        .insert([{ \n          title, \n          description, \n          priority, \n          completed: false,\n          user_id: user.id \n        }]);\n\n      if (error) throw error;\n      this.fetchTodos();\n    } catch (error) {\n      console.error('Error adding todo:', error);\n      throw error;\n    }\n  }\n\n  // Update a todo\n  async updateTodo(id: number, updates: Partial<Todo>): Promise<void> {\n    try {\n      const { data: { user } } = await this.supabase.auth.getUser();\n      if (!user) throw new Error('User not authenticated');\n\n      const { error } = await this.supabase\n        .from('todos')\n        .update(updates)\n        .eq('id', id)\n        .eq('user_id', user.id);\n\n      if (error) throw error;\n      this.fetchTodos();\n    } catch (error) {\n      console.error('Error updating todo:', error);\n      throw error;\n    }\n  }\n\n  // Delete a todo\n  async deleteTodo(id: number): Promise<void> {\n    try {\n      const { data: { user } } = await this.supabase.auth.getUser();\n      if (!user) throw new Error('User not authenticated');\n\n      const { error } = await this.supabase\n        .from('todos')\n        .delete()\n        .eq('id', id)\n        .eq('user_id', user.id);\n\n      if (error) throw error;\n      this.fetchTodos();\n    } catch (error) {\n      console.error('Error deleting todo:', error);\n      throw error;\n    }\n  }\n\n  // Toggle todo completion\n  async toggleTodo(id: number, completed: boolean): Promise<void> {\n    try {\n      const { data: { user } } = await this.supabase.auth.getUser();\n      if (!user) throw new Error('User not authenticated');\n\n      const { error } = await this.supabase\n        .from('todos')\n        .update({ completed })\n        .eq('id', id)\n        .eq('user_id', user.id);\n\n      if (error) throw error;\n      this.fetchTodos();\n    } catch (error) {\n      console.error('Error toggling todo:', error);\n      throw error;\n    }\n  }\n} "],"mappings":";AACA,SAASA,YAAY,QAAwB,uBAAuB;AACpE,SAASC,eAAe,QAAoB,MAAM;AAClD,SAASC,WAAW,QAAQ,gCAAgC;;AAe5D,OAAM,MAAOC,eAAe;EAClBC,QAAQ;EACRC,KAAK,GAAG,IAAIJ,eAAe,CAAS,EAAE,CAAC;EAE/CK,YAAA;IACE,IAAI,CAACF,QAAQ,GAAGJ,YAAY,CAC1BE,WAAW,CAACE,QAAQ,CAACG,GAAG,EACxBL,WAAW,CAACE,QAAQ,CAACI,OAAO,CAC7B;EACH;EAEAC,iBAAiBA,CAAA;IACf,OAAO,IAAI,CAACL,QAAQ;EACtB;EAEA;EACAM,QAAQA,CAAA;IACN,IAAI,CAACC,UAAU,EAAE;IACjB,OAAO,IAAI,CAACN,KAAK,CAACO,YAAY,EAAE;EAClC;EAEA;EACcD,UAAUA,CAAA;IAAA,IAAAE,KAAA;IAAA,OAAAC,iBAAA;MACtB,IAAI;QACF,MAAM;UAAEC,IAAI,EAAE;YAAEC;UAAI;QAAE,CAAE,SAASH,KAAI,CAACT,QAAQ,CAACa,IAAI,CAACC,OAAO,EAAE;QAC7D,IAAI,CAACF,IAAI,EAAE;QAEX,MAAM;UAAED,IAAI;UAAEI;QAAK,CAAE,SAASN,KAAI,CAACT,QAAQ,CACxCgB,IAAI,CAAC,OAAO,CAAC,CACbC,MAAM,CAAC,GAAG,CAAC,CACXC,EAAE,CAAC,SAAS,EAAEN,IAAI,CAACO,EAAE,CAAC,CACtBC,KAAK,CAAC,YAAY,EAAE;UAAEC,SAAS,EAAE;QAAK,CAAE,CAAC;QAE5C,IAAIN,KAAK,EAAE,MAAMA,KAAK;QACtBN,KAAI,CAACR,KAAK,CAACqB,IAAI,CAACX,IAAI,IAAI,EAAE,CAAC;MAC7B,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdQ,OAAO,CAACR,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC/C;IAAC;EACH;EAEA;EACMS,OAAOA,CAACC,KAAa,EAAEC,WAAoB,EAAEC,QAAA,GAAsC,QAAQ;IAAA,IAAAC,MAAA;IAAA,OAAAlB,iBAAA;MAC/F,IAAI;QACF,MAAM;UAAEC,IAAI,EAAE;YAAEC;UAAI;QAAE,CAAE,SAASgB,MAAI,CAAC5B,QAAQ,CAACa,IAAI,CAACC,OAAO,EAAE;QAC7D,IAAI,CAACF,IAAI,EAAE,MAAM,IAAIiB,KAAK,CAAC,wBAAwB,CAAC;QAEpD,MAAM;UAAEd;QAAK,CAAE,SAASa,MAAI,CAAC5B,QAAQ,CAClCgB,IAAI,CAAC,OAAO,CAAC,CACbc,MAAM,CAAC,CAAC;UACPL,KAAK;UACLC,WAAW;UACXC,QAAQ;UACRI,SAAS,EAAE,KAAK;UAChBC,OAAO,EAAEpB,IAAI,CAACO;SACf,CAAC,CAAC;QAEL,IAAIJ,KAAK,EAAE,MAAMA,KAAK;QACtBa,MAAI,CAACrB,UAAU,EAAE;MACnB,CAAC,CAAC,OAAOQ,KAAK,EAAE;QACdQ,OAAO,CAACR,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;QAC1C,MAAMA,KAAK;MACb;IAAC;EACH;EAEA;EACMkB,UAAUA,CAACd,EAAU,EAAEe,OAAsB;IAAA,IAAAC,MAAA;IAAA,OAAAzB,iBAAA;MACjD,IAAI;QACF,MAAM;UAAEC,IAAI,EAAE;YAAEC;UAAI;QAAE,CAAE,SAASuB,MAAI,CAACnC,QAAQ,CAACa,IAAI,CAACC,OAAO,EAAE;QAC7D,IAAI,CAACF,IAAI,EAAE,MAAM,IAAIiB,KAAK,CAAC,wBAAwB,CAAC;QAEpD,MAAM;UAAEd;QAAK,CAAE,SAASoB,MAAI,CAACnC,QAAQ,CAClCgB,IAAI,CAAC,OAAO,CAAC,CACboB,MAAM,CAACF,OAAO,CAAC,CACfhB,EAAE,CAAC,IAAI,EAAEC,EAAE,CAAC,CACZD,EAAE,CAAC,SAAS,EAAEN,IAAI,CAACO,EAAE,CAAC;QAEzB,IAAIJ,KAAK,EAAE,MAAMA,KAAK;QACtBoB,MAAI,CAAC5B,UAAU,EAAE;MACnB,CAAC,CAAC,OAAOQ,KAAK,EAAE;QACdQ,OAAO,CAACR,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;QAC5C,MAAMA,KAAK;MACb;IAAC;EACH;EAEA;EACMsB,UAAUA,CAAClB,EAAU;IAAA,IAAAmB,MAAA;IAAA,OAAA5B,iBAAA;MACzB,IAAI;QACF,MAAM;UAAEC,IAAI,EAAE;YAAEC;UAAI;QAAE,CAAE,SAAS0B,MAAI,CAACtC,QAAQ,CAACa,IAAI,CAACC,OAAO,EAAE;QAC7D,IAAI,CAACF,IAAI,EAAE,MAAM,IAAIiB,KAAK,CAAC,wBAAwB,CAAC;QAEpD,MAAM;UAAEd;QAAK,CAAE,SAASuB,MAAI,CAACtC,QAAQ,CAClCgB,IAAI,CAAC,OAAO,CAAC,CACbuB,MAAM,EAAE,CACRrB,EAAE,CAAC,IAAI,EAAEC,EAAE,CAAC,CACZD,EAAE,CAAC,SAAS,EAAEN,IAAI,CAACO,EAAE,CAAC;QAEzB,IAAIJ,KAAK,EAAE,MAAMA,KAAK;QACtBuB,MAAI,CAAC/B,UAAU,EAAE;MACnB,CAAC,CAAC,OAAOQ,KAAK,EAAE;QACdQ,OAAO,CAACR,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;QAC5C,MAAMA,KAAK;MACb;IAAC;EACH;EAEA;EACMyB,UAAUA,CAACrB,EAAU,EAAEY,SAAkB;IAAA,IAAAU,MAAA;IAAA,OAAA/B,iBAAA;MAC7C,IAAI;QACF,MAAM;UAAEC,IAAI,EAAE;YAAEC;UAAI;QAAE,CAAE,SAAS6B,MAAI,CAACzC,QAAQ,CAACa,IAAI,CAACC,OAAO,EAAE;QAC7D,IAAI,CAACF,IAAI,EAAE,MAAM,IAAIiB,KAAK,CAAC,wBAAwB,CAAC;QAEpD,MAAM;UAAEd;QAAK,CAAE,SAAS0B,MAAI,CAACzC,QAAQ,CAClCgB,IAAI,CAAC,OAAO,CAAC,CACboB,MAAM,CAAC;UAAEL;QAAS,CAAE,CAAC,CACrBb,EAAE,CAAC,IAAI,EAAEC,EAAE,CAAC,CACZD,EAAE,CAAC,SAAS,EAAEN,IAAI,CAACO,EAAE,CAAC;QAEzB,IAAIJ,KAAK,EAAE,MAAMA,KAAK;QACtB0B,MAAI,CAAClC,UAAU,EAAE;MACnB,CAAC,CAAC,OAAOQ,KAAK,EAAE;QACdQ,OAAO,CAACR,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;QAC5C,MAAMA,KAAK;MACb;IAAC;EACH;;qCA1HWhB,eAAe;EAAA;;WAAfA,eAAe;IAAA2C,OAAA,EAAf3C,eAAe,CAAA4C,IAAA;IAAAC,UAAA,EAFd;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}